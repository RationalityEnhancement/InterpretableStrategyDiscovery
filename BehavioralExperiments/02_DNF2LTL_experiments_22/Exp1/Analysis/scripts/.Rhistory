geom_ribbon(subset(data, condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[2]) +
xlab("Trial") +
ylab('Mean FSQ') +
ggtitle('Far-sightedness in \nthe Mortgage task') +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors, labels = labels)  +
theme(text = element_text(size = 15))  +
scale_x_continuous(limits = c(1,8), expand = c(0, 0), breaks = seq(1 , 8, 1), minor_breaks = seq(0 , 10, 1))+
scale_y_continuous(labels = percent, limits=c(0.1, 1)) +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize),
legend.title=element_blank(),
legend.position="none")
p2
# Mean Score Learning Curves -----------------------------------------------------
data <- getLC(subset(tf_valid, task =='roadtrip'), 'score', return = TRUE)
# plot
p3 <- ggplot(data, mapping = aes(x=trial, y=mean, group=condition)) + geom_line(aes(color=condition)) +
geom_ribbon(subset(data, !condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[1]) +
geom_ribbon(subset(data, condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[2]) +
xlab("Trial") +
ylab('Mean Score') +
ggtitle('Performance in \nthe Road Trip task') +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors, labels = labels)  +
theme(text = element_text(size = 15))  +
scale_x_continuous(limits = c(1,8), expand = c(0, 0), breaks = seq(1 , 8, 1), minor_breaks = seq(0 , 10, 1))+
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize),
legend.title=element_blank(),
legend.position="none")
p3
data <- getLC(subset(tf_valid, task =='mortgage'), 'score', return = TRUE)
# plot
p4 <- ggplot(data, mapping = aes(x=trial, y=mean, group=condition)) + geom_line(aes(color=condition)) +
geom_ribbon(subset(data, !condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[1]) +
geom_ribbon(subset(data, condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[2]) +
xlab("Trial") +
ylab('Optimal Choices') +
ggtitle('Performance in \nthe Mortgage task') +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors, labels = labels)  +
theme(text = element_text(size = 15))  +
scale_x_continuous(limits = c(1,8), expand = c(0, 0), breaks = seq(1 , 8, 1), minor_breaks = seq(0 , 10, 1))+
scale_y_continuous(labels = percent) +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize),
legend.title=element_blank(),
legend.position="none")
p4
pdf('../plots/Exp2_learning_curves.pdf', width = 14, height = 12)
ggarrange(p2, p1, p4, p3, labels = c("a", "b", "c", "d"), ncol = 2, nrow = 2, font.label = list(size = fontsize))
dev.off()
source('01_format_data.R')
source('01_format_data.R')
setwd("~/Desktop/02_DNF2LTL_experiments_22/Exp1/Analysis/scripts")
source('01_format_data.R')
# -- CA
model <- lmer('pa_mean ~ trial * conditionType + (1|pid)', trial_frame)
library(lme4)
library(lmerTest)
trial_frame$condition
# -- CA
model <- lmer('pa_mean ~ index * condition + (1|pid)', trial_frame)
# -- CA
model <- lmer('pa ~ index * condition + (1|pid)', trial_frame)
summary(model)
View(trial_frame)
model <- lm('pa ~ index * condition ', trial_frame)
summary(model)
# -- CA
model <- lmer('pa ~ index * condition + (1|pid)', trial_frame)
summary(model)
# -- CA
model <- lmer('pa ~ index + condition:index + (1|pid)', trial_frame)
summary(model)
# -- CA
model <- lmer('pa ~ index * condition + (1|pid)', trial_frame)
summary(model)
1.004e-01
1.150e-02
# -- expected score
model <- lmer('expectedScore ~ index * condition + (1|pid)', trial_frame)
summary(model)
View(df_combined)
unique(df_combined$conditionType)
# comparison to control group:
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'))
table(df_combined$conditionType)
# comparison to control group:
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'))
((60*21)-59)/(60*21)
subset(df_combined, conditionType != 'flowchart')
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'))
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'))
((60*21)-93)/(60*21)
# comparison to control group:
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'))
((60*21)-59)/(60*21)
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'))
((60*21)-93)/(60*21)
# comparison to control group:
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'))
((60*21)-59)/(60*21)
describeBy(df_combined$pa_mean, df_combined$conditionType, digits=3, mat=TRUE)
# Expected score ----------------------------------------------------------
describeBy(df_combined$expectedScoreMean, df_combined$conditionType, digits=3, mat=TRUE)
# Expected score ----------------------------------------------------------
describeBy(df_combined$expectedScoreMean, df_combined$conditionType, digits=3, mat=TRUE)
# comparison to control group:
t.test(expectedScoreMean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'), var.equal=TRUE)
cohen.d(expectedScoreMean ~ conditionType, data = subset(df_combined, conditionType != 'flowchart'))
t.test(expectedScoreMean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'), var.equal=TRUE)
cohen.d(expectedScoreMean ~ conditionType, data = subset(df_combined, conditionType != 'instructions'))
# Expected score ----------------------------------------------------------
describeBy(df_combined$expectedScoreMean, df_combined$conditionType, digits=3, mat=TRUE)
# comparison to control group:
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'), alternative='less')
((60*21)-59)/(60*21)
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'), alternative='less')
# comparison to control group:
t.test(expectedScoreMean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'), var.equal=TRUE, alternative='less')
cohen.d(expectedScoreMean ~ conditionType, data = subset(df_combined, conditionType != 'flowchart'))
t.test(expectedScoreMean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'), var.equal=TRUE, alternative='less')
cohen.d(expectedScoreMean ~ conditionType, data = subset(df_combined, conditionType != 'instructions'))
t.test(expectedScoreMean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'), var.equal=TRUE, alternative='less')
cohen.d(expectedScoreMean ~ conditionType, data = subset(df_combined, conditionType != 'instructions'))
# comparison to control group:
t.test(expectedScoreMean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'), var.equal=TRUE, alternative='less')
cohen.d(expectedScoreMean ~ conditionType, data = subset(df_combined, conditionType != 'flowchart'))
# Expected score ----------------------------------------------------------
describeBy(df_combined$expectedScoreMean, df_combined$conditionType, digits=3, mat=TRUE)
# test
t.test(expectedScoreMean ~ conditionType, data=df_valid, var.equal=TRUE,  alternative ='less')
source('01_format_data.R')
library(lme4)
library(lmerTest)
# -- CA
model <- lmer('pa ~ index * condition + (1|pid)', trial_frame)
summary(model)
1.004e-01
# -- expected score
model <- lmer('expectedScore ~ index * condition + (1|pid)', trial_frame)
summary(model)
# -- CA
model <- lmer('pa ~ index * condition + (1|pid)', trial_frame)
summary(model)
2.362e-03
source('01_format_data.R')
library(lme4)
library(lmerTest)
# -- CA
model <- lmer('pa ~ index * condition + (1|pid)', trial_frame)
summary(model)
model <- lmer('pa ~ index + (1|pid)', subset(trial_frame, condition == 1))
summary(model)
model <- lmer('pa ~ index + (1|pid)', subset(trial_frame, condition == 0))
summary(model)
model <- lmer('pa ~ index + (1|pid)', subset(trial_frame, condition == 1))
summary(model)
1.386e-02
model <- lmer('expectedScore ~ index + (1|pid)', subset(trial_frame, condition == 1))
summary(model)
model <- lmer('pa ~ index + (1|pid)', subset(trial_frame, condition == 0))
summary(model)
2.362e-03
model <- lmer('expectedScore ~ index + (1|pid)', subset(trial_frame, condition == 0))
summary(model)
model <- lmer('expectedScore ~ index + (1|pid)', subset(trial_frame, condition == 1))
summary(model)
# -- expected score
model <- lmer('expectedScore ~ index * condition + (1|pid)', trial_frame)
summary(model)
setwd("~/Desktop/02_DNF2LTL_experiments_22/Exp2/Analysis/scripts")
source('01_format_data.R')
library(lme4)
library(lmerTest)
df_m <- subset(tf_valid, task == 'mortgage')
df_r <- subset(tf_valid, task == 'roadtrip')
df_m$conditionType
# -- FSQ
model <- lmer('FSQ ~ trial * conditionType + (1|pid)', subset(df_m, condition == 0)
)
subset(df_m, condition == 0)
# -- FSQ
model <- lmer('FSQ ~ trial + (1|pid)', subset(df_m, condition == 0))
summary(model)
# -- FSQ
model <- lmer('FSQ ~ trial + (1|pid)', subset(df_m, condition == 1))
summary(model)
# -- FSQ
model <- lmer('FSQ ~ trial + (1|pid)', subset(df_m, condition == 1))
summary(model)
# -- FSQ
model <- lmer('FSQ ~ trial + (1|pid)', subset(df_m, condition == 0))
summary(model)
# -- FSQ
model <- lmer('FSQ ~ trial + (1|pid)', subset(df_r, condition == 0))
summary(model)
# -- FSQ
model <- lmer('FSQ ~ trial + (1|pid)', subset(df_r, condition == 1))
summary(model)
# -- FSQ
model <- lmer('FSQ ~ trial + (1|pid)', subset(df_r, condition == 1))
summary(model)
# -- FSQ
model <- lmer('FSQ ~ trial + (1|pid)', subset(df_r, condition == 0))
summary(model)
# -- FSQ
model <- lmer('FSQ ~ trial + (1|pid)', subset(df_m, condition == 0))
summary(model)
# -- FSQ
model <- lmer('FSQ ~ trial + (1|pid)', subset(df_m, condition == 1))
summary(model)
model <- lmer('FSQ ~ trial * conditionType + (1|pid)', df_r)
summary(model)
# -- FSQ
model <- lmer('FSQ ~ trial + (1|pid)', subset(df_m, condition == 1))
summary(model)
# -- FSQ
model <- lmer('FSQ ~ trial + (1|pid)', subset(df_m, condition == 0))
summary(model)
# -- FSQ
model <- lmer('score ~ trial + (1|pid)', subset(df_m, condition == 0))
summary(model)
# -- FSQ
model <- lmer('score ~ trial + (1|pid)', subset(df_m, condition == 1))
summary(model)
# -- Performance
model <- glmer('score ~ trial * conditionType + (1|pid)', df_m, family = binomial)
summary(model)
# -- FSQ
model <- glmer('score ~ trial + (1|pid)', subset(df_m, condition == 1))
model <- glmer('score ~ trial + (1|pid)', subset(df_m, condition == 1), family = binomial)
summary(model)
model <- glmer('score ~ trial + (1|pid)', subset(df_m, condition == 0), family = binomial)
summary(model)
df_m <- subset(tf_valid, task == 'mortgage')
df_r <- subset(tf_valid, task == 'roadtrip')
# -- FSQ
model <- lmer('score ~ trial + (1|pid)', subset(df_m, condition == 1))
summary(model)
# -- FSQ
model <- lmer('score ~ trial + (1|pid)', subset(df_r, condition == 1))
summary(model)
model <- lmer('FSQ ~ trial * conditionType + (1|pid)', df_r)
summary(model)
model <- lmer('FSQ ~ trial * conditionType + (1|pid)', df_m)
summary(model)
df_m <- subset(tf_valid, task == 'mortgage')
df_r <- subset(tf_valid, task == 'roadtrip')
# -- FSQ
model <- lmer('score ~ trial + (1|pid)', subset(df_r, condition == 1))
summary(model)
# -- FSQ
model <- lmer('score ~ trial + (1|pid)', subset(df_m, condition == 1))
summary(model)
# -- FSQ
model <- lmer('score ~ trial + (1|pid)', subset(df_m, condition == 0))
summary(model)
# -- FSQ
model <- lmer('score ~ trial + (1|pid)', subset(df_m, condition == 1))
summary(model)
model <- lmer('FSQ ~ conditionType + (1|pid)', df_m)
summary(model)
# -- FSQ
model <- lmer('score ~ trial + (1|pid)', subset(df_m, condition == 1))
summary(model)
# -- FSQ
model <- lmer('score ~ trial + (1|pid)', subset(df_m, condition == 1))
summary(model)
model <- lmer('FSQ ~ trial * conditionType + (1|pid)', df_m)
summary(model)
# -- FSQ
model <- lmer('score ~ trial + (1|pid)', subset(df_m, condition == 1))
summary(model)
# -- FSQ
model <- lmer('score ~ trial + (1|pid)', subset(df_m, condition == 0))
summary(model)
View(df_m)
# -- FSQ
model <- lmer('FSQ ~ trial + (1|pid)', subset(df_m, condition == 0))
summary(model)
# -- FSQ
model <- lmer('FSQ ~ trial + (1|pid)', subset(df_m, condition == 1))
summary(model)
source('01_format_data.R')
colors <- c("#3977AF", "#EF8536")
fontsize <- 25
fontsize_title <- 25
cond_names <- c('control', 'supported by \n decision aid')
labels <- c('control', 'supported by \n decision aid')
getLC <- function(df, dv, labels = cond_names, return=FALSE, path=''){
# cast condition as binary variable
df$condition = df$conditionType == 'control'
df$trial <- df$trial + 1
# aggregate mean
formula = reformulate(termlabels = 'condition + trial', response = dv)
data_mean <- aggregate(formula, df, mean)
# aggregate error
data_N <- aggregate(formula, df, length)
data_sd <- aggregate(formula, df, sd)
data_mean$error <- 1.96*data_sd[,c(dv)]/sqrt(data_N[,c(dv)])
#rename
names(data_mean) <- c('condition', 'trial', 'mean', 'error')
if(return){
data_mean
} else {
plotLC(data_mean, dv, labels, return, path = path)
}
}
data <- getLC(subset(tf_valid, task =='roadtrip'), 'FSQ', return = TRUE)
# plot
p1 <- ggplot(data, mapping = aes(x=trial, y=mean, group=condition)) + geom_line(aes(color=condition)) +
geom_ribbon(subset(data, !condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[1]) +
geom_ribbon(subset(data, condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[2]) +
xlab("Trial") +
ylab('Mean FSQ') +
ggtitle('Far-sightedness in \nthe Road Trip task') +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors, labels = labels)  +
theme(text = element_text(size = 15))  +
scale_x_continuous(limits = c(1,8), expand = c(0, 0), breaks = seq(1 , 8, 1), minor_breaks = seq(0 , 10, 1))+
scale_y_continuous(labels = percent, limits=c(0.1, 1)) +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize),
legend.title=element_blank(),
legend.position="none")
p1
data <- getLC(subset(tf_valid, task =='mortgage'), 'FSQ', return = TRUE)
# plot
p2 <- ggplot(data, mapping = aes(x=trial, y=mean, group=condition)) + geom_line(aes(color=condition)) +
geom_ribbon(subset(data, !condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[1]) +
geom_ribbon(subset(data, condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[2]) +
xlab("Trial") +
ylab('Mean FSQ') +
ggtitle('Far-sightedness in \nthe Mortgage task') +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors, labels = labels)  +
theme(text = element_text(size = 15))  +
scale_x_continuous(limits = c(1,8), expand = c(0, 0), breaks = seq(1 , 8, 1), minor_breaks = seq(0 , 10, 1))+
scale_y_continuous(labels = percent, limits=c(0.1, 1)) +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize),
legend.title=element_blank(),
legend.position="none")
p2
getLC <- function(df, dv, labels = cond_names, return=FALSE, path=''){
# cast condition as binary variable
df$condition = df$conditionType == 'instructions'
df$trial <- df$trial + 1
# aggregate mean
formula = reformulate(termlabels = 'condition + trial', response = dv)
data_mean <- aggregate(formula, df, mean)
# aggregate error
data_N <- aggregate(formula, df, length)
data_sd <- aggregate(formula, df, sd)
data_mean$error <- 1.96*data_sd[,c(dv)]/sqrt(data_N[,c(dv)])
#rename
names(data_mean) <- c('condition', 'trial', 'mean', 'error')
if(return){
data_mean
} else {
plotLC(data_mean, dv, labels, return, path = path)
}
}
data <- getLC(subset(tf_valid, task =='roadtrip'), 'FSQ', return = TRUE)
# plot
p1 <- ggplot(data, mapping = aes(x=trial, y=mean, group=condition)) + geom_line(aes(color=condition)) +
geom_ribbon(subset(data, !condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[1]) +
geom_ribbon(subset(data, condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[2]) +
xlab("Trial") +
ylab('Mean FSQ') +
ggtitle('Far-sightedness in \nthe Road Trip task') +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors, labels = labels)  +
theme(text = element_text(size = 15))  +
scale_x_continuous(limits = c(1,8), expand = c(0, 0), breaks = seq(1 , 8, 1), minor_breaks = seq(0 , 10, 1))+
scale_y_continuous(labels = percent, limits=c(0.1, 1)) +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize),
legend.title=element_blank(),
legend.position="none")
p1
getLC <- function(df, dv, labels = cond_names, return=FALSE, path=''){
# cast condition as binary variable
df$condition = df$conditionType == 'instructions'
df$trial <- df$trial + 1
# aggregate mean
formula = reformulate(termlabels = 'condition + trial', response = dv)
data_mean <- aggregate(formula, df, mean)
# aggregate error
data_N <- aggregate(formula, df, length)
data_sd <- aggregate(formula, df, sd)
data_mean$error <- 1.96*data_sd[,c(dv)]/sqrt(data_N[,c(dv)])
#rename
names(data_mean) <- c('condition', 'trial', 'mean', 'error')
if(return){
data_mean
} else {
plotLC(data_mean, dv, labels, return, path = path)
}
}
data <- getLC(subset(tf_valid, task =='roadtrip'), 'FSQ', return = TRUE)
# plot
p1 <- ggplot(data, mapping = aes(x=trial, y=mean, group=condition)) + geom_line(aes(color=condition)) +
geom_ribbon(subset(data, !condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[1]) +
geom_ribbon(subset(data, condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[2]) +
xlab("Trial") +
ylab('Mean FSQ') +
ggtitle('Far-sightedness in \nthe Road Trip task') +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors, labels = labels)  +
theme(text = element_text(size = 15))  +
scale_x_continuous(limits = c(1,8), expand = c(0, 0), breaks = seq(1 , 8, 1), minor_breaks = seq(0 , 10, 1))+
scale_y_continuous(labels = percent, limits=c(0.1, 1)) +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize),
legend.title=element_blank(),
legend.position="none")
p1
data <- getLC(subset(tf_valid, task =='mortgage'), 'FSQ', return = TRUE)
# plot
p2 <- ggplot(data, mapping = aes(x=trial, y=mean, group=condition)) + geom_line(aes(color=condition)) +
geom_ribbon(subset(data, !condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[1]) +
geom_ribbon(subset(data, condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[2]) +
xlab("Trial") +
ylab('Mean FSQ') +
ggtitle('Far-sightedness in \nthe Mortgage task') +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors, labels = labels)  +
theme(text = element_text(size = 15))  +
scale_x_continuous(limits = c(1,8), expand = c(0, 0), breaks = seq(1 , 8, 1), minor_breaks = seq(0 , 10, 1))+
scale_y_continuous(labels = percent, limits=c(0.1, 1)) +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize),
legend.title=element_blank(),
legend.position="none")
p2
# Mean Score Learning Curves -----------------------------------------------------
data <- getLC(subset(tf_valid, task =='roadtrip'), 'score', return = TRUE)
# plot
p3 <- ggplot(data, mapping = aes(x=trial, y=mean, group=condition)) + geom_line(aes(color=condition)) +
geom_ribbon(subset(data, !condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[1]) +
geom_ribbon(subset(data, condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[2]) +
xlab("Trial") +
ylab('Mean Score') +
ggtitle('Performance in \nthe Road Trip task') +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors, labels = labels)  +
theme(text = element_text(size = 15))  +
scale_x_continuous(limits = c(1,8), expand = c(0, 0), breaks = seq(1 , 8, 1), minor_breaks = seq(0 , 10, 1))+
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize),
legend.title=element_blank(),
legend.position="none")
p3
data <- getLC(subset(tf_valid, task =='mortgage'), 'score', return = TRUE)
# plot
p4 <- ggplot(data, mapping = aes(x=trial, y=mean, group=condition)) + geom_line(aes(color=condition)) +
geom_ribbon(subset(data, !condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[1]) +
geom_ribbon(subset(data, condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[2]) +
xlab("Trial") +
ylab('Optimal Choices') +
ggtitle('Performance in \nthe Mortgage task') +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors, labels = labels)  +
theme(text = element_text(size = 15))  +
scale_x_continuous(limits = c(1,8), expand = c(0, 0), breaks = seq(1 , 8, 1), minor_breaks = seq(0 , 10, 1))+
scale_y_continuous(labels = percent) +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize),
legend.title=element_blank(),
legend.position="none")
p4
pdf('../plots/Exp2_learning_curves.pdf', width = 14, height = 12)
ggarrange(p2, p1, p4, p3, labels = c("a", "b", "c", "d"), ncol = 2, nrow = 2, font.label = list(size = fontsize))
dev.off()
source('01_format_data.R')
# comparison to control group:
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'), alternative='less')
setwd("~/Desktop/02_DNF2LTL_experiments_22/Exp1/Analysis/scripts")
source('01_format_data.R')
# comparison to control group:
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'), alternative='less')
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'), alternative='less')
((60*21)-59)/(60*21)
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'), alternative='less')
((60*21)-93)/(60*21)
# comparison to control group:
t.test(expectedScoreMean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'), var.equal=TRUE, alternative='less')
t.test(expectedScoreMean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'), var.equal=TRUE, alternative='less')
