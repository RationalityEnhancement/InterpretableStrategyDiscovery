// Generated by CoffeeScript 2.2.2
  // coffeelint: disable=max_line_length, indentation
var  BONUS, STRATEGY_DESCRIPTION, INSTRUCTIONS, FLOWCHART, BLOCKS, CONDITION,CONDITION_TYPE, CONSTANT_DELAY, DEBUG, DEMO, DEMO_TRIALS, N_TRIAL, PARAMS, SCORE, SHOW_PARTICIPANT, STRUCTURE, TALK, TRAIN_TRIALS, TEST_TRIALS, calculateBonus, createStartButton, getTrials, initializeExperiment, psiturk, saveData, with_feedback, with_info, with_reward,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

BONUS = 0;
DEBUG = false;
TALK = false;
SHOW_PARTICIPANT = false;

if (DEBUG) {
  console.log("X X X X X X X X X X X X X X X X X\n X X X X X DEBUG  MODE X X X X X\nX X X X X X X X X X X X X X X X X");
} else {
  console.log("# =============================== #\n# ========= NORMAL MODE ========= #\n# =============================== #");
}

// condition variables
CONDITION = parseInt(condition);
//CONDITION = parseInt(window.prompt('0: Control, 1: Flowhchart, 2: Instruction', 0));
//DEBUG = window.prompt('skip to testing trials? ,0/1', 0) == 1;
var INDEX = parseInt(window.prompt('Start Index', 0));

if(CONDITION == 0) {
  CONDITION_TYPE = 'control';

} else if(CONDITION == 1) {
  CONDITION_TYPE = 'flowchart';

  FLOWCHART = {'div': "<img src='static/images/training_parts/flowchart_training.png' class='flowchart-image'>",
  'checks': [['p.isMostDistantUnobserved.call(this, s, false)', 'p.existsValue.call(this, s, true, 48)'], ['p.alwaysFalse.call(this,s,false)'], ['p.alwaysFalse.call(this,s,false)']], 'show_feedback': true}


} else if(CONDITION == 2) {
  CONDITION_TYPE = 'instructions';

  STRATEGY_DESCRIPTION = 'Click any node that contains green and orange until you find a +10. Then click the nodes that contain blue and pink.';

  INSTRUCTIONS = {'div': "<div class='instructions'>Investigate <b>the most distant</b> blank destinations until you find <b>the best one</b> (profit of +48).",
  'checks': [['p.isMostDistantUnobserved.call(this, s, false)', 'p.existsValue.call(this, s, true, 48)'], ['p.alwaysFalse.call(this,s,false)'], ['p.alwaysFalse.call(this,s,false)']], 'show_feedback': true};

} else {
  CONDITION_TYPE = 'demo';
}

PAY_BASE = '$3';
PAY_MEAN = '$4';

with_info = false;
with_reward = false;
with_feedback = false;

BLOCKS = void 0;

PARAMS = void 0;

TRAIN_TRIALS = void 0;
TEST_TRIALS = void 0;

DEMO_TRIALS = void 0;

STRUCTURE = void 0;

N_TRIAL = void 0;

SCORE = 0;

calculateBonus = void 0;

getTrainTrials = void 0;
getTestTrials = void 0;

CONSTANT_DELAY = 3;

psiturk = new PsiTurk(uniqueId, adServerLoc, mode);

psiturk.recordUnstructuredData('condition', CONDITION);
psiturk.recordUnstructuredData('condition_type', CONDITION_TYPE);

//psiturk.recordUnstructuredData 'with_feedback', with_feedback
psiturk.recordUnstructuredData('with_reward', with_reward);

psiturk.recordUnstructuredData('with_info', with_info);

saveData = function() {
  return new Promise(function(resolve, reject) {
    var timeout;
    timeout = delay(10000, function() {
      return reject('timeout');
    });
    return psiturk.saveData({
      error: function() {
        clearTimeout(timeout);
        console.log('Error saving data!');
        return resolve();
        return reject('error');
      },
      success: function() {
        clearTimeout(timeout);
        console.log('Data saved to psiturk server.');
        return resolve();
      }
    });
  });
};

$(window).resize(function() {
  return checkWindowSize(1000, 600, $('#jspsych-target'));
});

$(window).resize();

$(window).on('load', function() {
  console.log("On load start");
  var loadTimeout, slowLoad;
  psiturk.preloadImages(['static/images/FlightPlanningPartiallyRevealed.png', 'static/images/NodeInspector.png', 'static/images/training_parts/flowchart_training.png', 'static/images/roadtrip/maps/fantasy_map_1560976725599.png', 'static/images/roadtrip/maps/fantasy_map_1560976804519.png', 'static/images/roadtrip/maps/fantasy_map_1560976821363.png', 'static/images/roadtrip/maps/fantasy_map_1560976821363.png', 'static/images/roadtrip/maps/fantasy_map_1560976853546.png', 'static/images/roadtrip/maps/fantasy_map_1560976890783.png']);
  // Load data and test connection to server.
  slowLoad = function() {
    var ref;
    return (ref = $('slow-load')) != null ? ref.show() : void 0;
  };
  loadTimeout = delay(12000, slowLoad);
  return delay(300, function() {
    var id;
    console.log('Loading data');
    PARAMS = {
      inspectCost: 1,
      startTime: Date(Date.now()),
      bonusRate: .002,
      // variance: ['2_4_24', '24_4_2'][CONDITION]
      branching: '312',
      with_feedback: with_feedback,
      condition: CONDITION,
      with_reward: with_reward,
      with_info: with_info
    };
    psiturk.recordUnstructuredData('params', PARAMS);
    if (PARAMS.variance) {
      id = `${PARAMS.branching}_${PARAMS.variance}`;
    } else {
      id = `${PARAMS.branching}`;
    }
    STRUCTURE = loadJson("static/json/structure/tree.json");
    TRAIN_TRIALS = loadJson("static/json/train_trials.json");
    console.log(`loaded ${(TRAIN_TRIALS != null ? TRAIN_TRIALS.length : void 0)} train trials`);
    TEST_TRIALS = loadJson("static/json/roadtrip_trials.json");
    console.log(`loaded ${(TEST_TRIALS != null ? TEST_TRIALS.length : void 0)} test trials`);
    getTrainTrials = (function() {
      var idx, t;
      t = _.shuffle(TRAIN_TRIALS);
      idx = 0;
      return function(n){
        idx += n;
        return t.slice(idx - n, idx);
      };
    })();
    getTestTrials = (function() {
      var idx, t;
      t = _.shuffle(TEST_TRIALS);
      idx = 0;
      return function(n) {
        idx += n;
        return t.slice(idx - n, idx);
      };
    })();
    if (DEBUG || TALK) {
      createStartButton();
      return clearTimeout(loadTimeout);
    } else {
      console.log('Testing saveData');
      if (DEMO) {
        clearTimeout(loadTimeout);
        return delay(500, createStartButton);
      } else {
        return saveData().then(function() {
          clearTimeout(loadTimeout);
          return delay(500, createStartButton);
        }).catch(function() {
          clearTimeout(loadTimeout);
          return $('#data-error').show();
        });
      }
    }
  });
});

createStartButton = function() {
  if (DEBUG || TALK) {
    initializeExperiment();
    return;
  }

  //f create start button manually to increase speed
  $('#jspsych-target').append("<div class='alert alert-info'>\n   To start the experiment click <b>Begin</b> below.\n</div>\n<div class='center'>\n  <button class='btn btn-primary btn-lg centered' id=\"Begin\">Begin</button>\n</div>");
  $('#Begin').click(function() {
    return initializeExperiment();
  });

  $('#load-icon').hide();
  $('#slow-load').hide();
  $('#success-load').hide();
  //return $('#load-btn').click(initializeExperiment);
};

initializeExperiment = function() {
  var Block, ButtonBlock, MouselabBlock, QuizLoop, TextBlock, bonus_text, divider, divider_intro_training, divider_pretest_training, divider_training_test, experiment_timeline, extra_question_options, extra_questions, extra_questions_answers, extra_questions_required, finish, fullMessage, img, instruct_loop, instruction_pages, instructions, nodeValuesDescription, post_test, prompt_resubmit, quiz, reprompt, reset_score, save_data, survey, talk_demo, test_block_intro, text, train_basic1, training, verbal_responses;
  $('#jspsych-target').html('');
  console.log('INITIALIZE EXPERIMENT');
  //  ======================== #
  //  ========= TEXT ========= #
  //  ======================== #

  // These functions will be executed by the jspsych plugin that
  // they are passed to. String interpolation will use the values
  // of global variables defined in this file at the time the function
  // is called.
  text = {
    debug: function() {
      if (DEBUG) {
        return "`DEBUG`";
      } else {
        return '';
      }
    }
  };
  // ================================= #
  // ========= BLOCK CLASSES ========= #
  // ================================= #
  Block = class Block {
    constructor(config) {
      _.extend(this, config);
      this._block = this; // allows trial to access its containing block for tracking state
      if (this._init != null) {
        this._init();
      }
    }

  };
  TextBlock = (function() {
    class TextBlock extends Block {};

    TextBlock.prototype.type = 'text';

    TextBlock.prototype.cont_key = [];

    return TextBlock;

  }).call(this);
  ButtonBlock = (function() {
    class ButtonBlock extends Block {};

    ButtonBlock.prototype.type = 'button-response';

    ButtonBlock.prototype.is_html = true;

    ButtonBlock.prototype.choices = ['Continue'];

    ButtonBlock.prototype.button_html = '<button class="btn btn-primary btn-lg">%choice%</button>';

    return ButtonBlock;

  }).call(this);
  QuizLoop = class QuizLoop extends Block {
    loop_function(data) {
      var c, i, len, ref;
      console.log('data', data);
      ref = data[data.length].correct;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          return true;
        }
      }
      return false;
    }

  };
  MouselabBlock = (function() {
    class MouselabBlock extends Block {
      _init() {
        _.extend(this, STRUCTURE);
        return this.trialCount = 0;
      }

    };

    MouselabBlock.prototype.type = 'mouselab-mdp';
    MouselabBlock.prototype.playerImage = 'static/images/plane.png';
    MouselabBlock.prototype.lowerMessage = "<b>Clicking on a node reveals its value for a $1 fee.<br>\nMove with the arrow keys.</b>";

    return MouselabBlock;

  }).call(this);

  //  ============================== #
  //  ========= HELPER ========= #
  //  ============================== #
  img = function(name, width, c ='display') {
    return `<img class='${c}' style=\"width:${width}%; height:auto\" src='static/images/${name}.png'/>`;
  };
  gif = function(name, width, c ='display') {
    return `<img class='${c}' style=\"width:${width}%; height:auto\" src='static/images/${name}.gif'/>`;
  };  //  ============================== #
  //  ========= EXPERIMENT TIMELINE ========= #
  //  ============================== #






  // MOUSELAB INSTRCUTION BLOCK --------------------------------

  welcome = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function()
    { return [markdown("\n\n<h1>Structure of the HIT</h1>\n\n This experiment has three phases: \n\n- **Instructions:** In this phase, you will be introduced to the experiment and given instructions about it. \n\n- **Training:** In this phase, you will apply the knowledge acquired in the instructions phase. \n\n- **Testing:** In this phase, you will apply the knowledge acquired in the training phase and perform the experimental task.\n\nIf you complete the HIT, you will receive a base pay of " +PAY_BASE+ " and a bonus which is dependent on your performance in the test phase. On average, a person who conscientiously follows the instructions receives " +PAY_MEAN+ ".\n\n Click **Next** to start the **Instructions** part.")]
  }});


  // welcome tutor
  welcome_tutor = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function()
    { return [
      markdown("\n\n<h1>Making good decisions</h1>\n\nIn this HIT, you will learn a strategy that you can use to make better\ndecisions in the testing  phase as well as in your everyday life. To help you\nlearn this strategy, we created a brain training game called _Flight\nPlanning_.\n ")]
      }
  });

  welcome_block_tutor = new Block({
    timeline: [welcome, welcome_tutor]
  });
  welcome_block = new Block({
    timeline: [welcome]
  });




  //instructions flightplanning
  instructions_flightplanning = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function()
    { return [
      markdown("# Flight Planning\n\n - The *Flight Planning* game is about choosing the series of destinations that an airplane should fly to.\n - The gray circles in the screenshot below are the possible destinations the airplane can fly to.\n - ***Some destinations may be more profitable than others.***\n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/FlightPlanningPartiallyRevealed.png'/>\n"),
      markdown("# Flight Planning\n\n - The airplane can ***only*** fly along the routes shown in the screenshot below and ***only*** in the direction of the arrows.\n - Therefore some destinations can only be reached via other intermediate destinations.\n - You will be able to move the airplane with the arrow keys.\n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/FlightPlanningPartiallyRevealed.png'/>"),
      markdown("# Collecting information\n\n- It's hard to make good decision when you can't see the reward of a destination!\n- Fortunately, ***you can click on a destination to find out how much the airplane would gain or lose if the airplane was to fly there***.\n- The image below illustrates how this works.\n- Clicking on an airport *doesn't* mean flying there. The airplnae *won't* get the profit or loss a click reveals unless you fly there later on.\n- **Note:** you can only gather information *before* the first flight. Once the airplane starts moving clicking will be disabled.\n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/NodeInspector.png'/>"),
      markdown("# Gains and losses\n- Landing the plane at an airport will either yield a reward of up to <b><font color='green'>$48</font></b> or a loss of up to <b><font color='red'>$-48</font></b>\n- Information is costly. The price for finding out how profitable different destinations are is <b>$1 per click</b>.\n- The goal of the airplane is to end up with as much money as possible at the end of the game.\n\n"),
      markdown("# Additional information\n\n<img class='display' style='width:50%; height:auto' src='static/images/NodeInspector.png'/>\n- You will play Flight Planning for multiple rounds.\n- ***Every time you play this game the profits/losses of the airports will be different.*** So you have to plan a route every time."),
      markdown("# Attention check\n\nBefore you can advance, you must pass a quiz to show\nthat you understand the rules. If you get any of the questions\nincorrect, you will be brought back to the instructions to review and\ntry the quiz again.")]
      }
  });

  quiz1 = new Block({
    preamble: function() {
    return markdown("# Attention Check\n\nPlease answer the following questions.\n");
    },
    type: 'survey-multi-choice',
    questions: [
      "What are the worst loss and the best profit that a single flight can make?",
      "What is the cost of clicking on a destination to find out how profitable it is to fly there?",
      "Will each round be the same?"
    ],
    options: [
      ['$-4 and $50',
      '$-10 and $10',
      '$-48 and $48',
      '$-100 and $100'],

      ['$0',
      '$1',
      '$5',
      '$10'],

      ['Yes.',
      'No, how profitable each destination is may be different each time.',
      'No, the number of possible destinations will be different each time.']
    ],
    required: [true, true, true],
    correct: [
      '$-48 and $48',
      '$1',
      'No, how profitable each destination is may be different each time.'
    ]
  });

  instructions_flightplanning_loop = new Block({
    timeline: [instructions_flightplanning, quiz1],
    loop_function: function(data) {
      var c, i, len, ref;
      console.log(data);
      ref = data[data.length-1].correct;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          alert("You got at least one question wrong. We'll send you back to the\ninstructions and then you can try again.");
          return true; // try again
        }
      }
      psiturk.saveData();
      return false;
    }
  });



  // flowchart tutor -----
  instructions_flow = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function(){
      return [markdown("<h1>Flowchart</h1> To help you play the Flight Planning task, we will convey to you a near-optimal clicking strategy in form of a flowchart. It walks you through a list of one or more questions that you need to answer to and describes which destinations to click. Look at the image below to see how a flowchart can look like." + img('example-flow',75)),

      markdown("<h1>Task procedure</h1> \n To enact the strategy conveyed by the flowchart do the following: \n1. Read the flowchart carefully. \n2. Think of a destination you would like to click \n3. Go through the flowchart and answer questions about that destination. \n4. Click that destination if the flowchart landed you in a 'Click it' decision. Otherwise, think of a different destination. \n5. Once you are sure that you clicked all the destinations the flowchart allows clicking -- that is it would evaluate to 'Don't click it' for every destination -- start moving the airplane."),

      markdown("<h1>Your Task</h1>  Your task is to make clicks according to the flowchart in order to maximize earnings for the airplane. To make things even easier you will receive feedback after each click telling you whether your click was correct or not.")]
    }
  });

  quiz2_flow = new Block({
    preamble: function() {
      return markdown("# Attention Check \n\nPlease answer the following questions.\n");
    },
    type: 'survey-multi-choice',
    questions: ["What is your task in the game?",
                "When should you start moving the airplane?",
                "Will I receive feedback?"],
    options: [['Click destinations that I would like to inspect.', 'Click destinations according to the strategy described in the flowchart.', 'There is no task'],
              ['When none of the destinations can be clicked according to the strategy.', 'After I clicked one destination.', 'After I clicked all destinations.'],
              ['Yes', 'No']
       ],
    correct: ['Click destinations according to the strategy described in the flowchart.','When none of the destinations can be clicked according to the strategy.', 'Yes']
  });

  instructions_flow_loop = new Block({
    timeline: [instructions_flow, quiz2_flow],
    loop_function: function(data) {
      var c, i, len, ref;
      ref = data[data.length-1].correct;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          alert("You got at least one question wrong. We'll send you back to the\ninstructions and then you can try again.");
          return true; // try again
        }
      }
      psiturk.saveData();
      return false;
    }
  });

  // insturctions tutor -----
  instructions_instr = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function(){
      return [markdown("<h1>Instructions</h1> To help you play the Flight Planning task, we will convey to you a near-optimal clicking strategy in form of instructions. The instructions tell you what to click step by step. Look at the image below to see how a sequence of instructions can look like." + img('example-instr',60)),

      markdown("<h1>Task procedure</h1> \nTo enact the strategy conveyed by the instructions do the following: \n1. Read the instructions carefully. \n2. Click the destinations by following the procedure described in the instructions. \n3. Once there are no more destinations the instructions allow clicking, start moving the airplane."),

      markdown("<h1>Your Task</h1>  Your task is to make clicks according to the instructions in order to maximize earnings for the airplane. To make things even easier you will receive feedback after each click telling you whether your click was correct or not.")]
    }
  });

  quiz2_instr = new Block({
    preamble: function() {
      return markdown("# Attention Check \n\nPlease answer the following questions.\n");
    },
    type: 'survey-multi-choice',
    questions: ["What is your task in the game?",
                "When should you start moving the airplane?",
                "Will I receive feedback?"],
    options: [['Click destinations that I would like to inspect.', 'Click destinations according to the strategy described in the instructions.', 'There is no task'],
              ['When none of the destinations can be clicked according to the strategy.', 'After I clicked one destination.', 'After I clicked all destinations.'],
              ['Yes', 'No']
       ],
    correct: ['Click destinations according to the strategy described in the instructions.','When none of the destinations can be clicked according to the strategy.', 'Yes']
  });

  instructions_instr_loop = new Block({
    timeline: [instructions_instr, quiz2_instr],
    loop_function: function(data) {
      var c, i, len, ref;
      ref = data[data.length-1].correct;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          alert("You got at least one question wrong. We'll send you back to the\ninstructions and then you can try again.");
          return true; // try again
        }
      }
      psiturk.saveData();
      return false;
    }
  });

  instructions_block = new Block({
    timeline: [instructions_flightplanning_loop]
  });
  instructions_block_flow = new Block({
    timeline: [instructions_flightplanning_loop, instructions_flow_loop]
  });
  instructions_block_instr = new Block({
    timeline: [instructions_flightplanning_loop, instructions_instr_loop]
  });


/*
  //Practice BLOCKS
  getTutorphrase2 = function(condition_type){
    if(condition_type == 'flowchart'){
      return 'An intelligent flowchart will help you to play it.'
    } else if(condition_type == 'instructions'){
      return 'Intelligent instructions will help you to play it.'
    } else {
      return ""
    }
  }

  practice_intro = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function()
    { return [
      markdown("<h1>Practice</h1> Before you begin the real training, you can try the game in this practice trial. " + getTutorphrase2(CONDITION_TYPE))]
    }
  });

  practice_control = new MouselabBlock({
    rightMessage: "",
    showMoneyMade: false,
    lowerMessage: "<b>Click destinations to reveal their value for $1! </b>",
    minTime: DEBUG ? 1 : 10,
    postTrialDelay: DEBUG ? 1 : 2,
    clickDelay: 0,
    show_feedback: false,
    show_custom_feedback: false,
    blockName: 'practice',
    blockTitle: 'Practice',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline:  getTestTrials(1),
    startScore: 50
  });


  practice_flow = new MouselabBlock({
    rightMessage: "",
    showMoneyMade: false,
    show_div_tutor: true,
    divTutor_config: FLOWCHART,
    lowerMessage: "<b>Click the destinations according to the strategy conveyed by the flowchart! </b>",
    minTime: DEBUG ? 1 : 10,
    postTrialDelay: DEBUG ? 1 : 2,
    clickDelay: 0,
    show_feedback: false,
    show_custom_feedback: false,
    blockName: 'practice',
    blockTitle: 'Practice',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline:  getTestTrials(1),
    startScore: 50
  });

  practice_instr = new MouselabBlock({
    rightMessage: "",
    showMoneyMade: false,
    show_div_tutor: true,
    divTutor_config: INSTRUCTIONS,
    lowerMessage: "<b>Click the destinations according to the strategy conveyed by the instructions! </b>",
    minTime: DEBUG ? 1 : 10,
    postTrialDelay: DEBUG ? 1 : 2,
    clickDelay: 0,
    show_feedback: false,
    show_custom_feedback: false,
    blockName: 'practice',
    blockTitle: 'Practice',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline:  getTestTrials(1),
    startScore: 50
  });

  practice_block = new Block({
    timeline: [practice_intro, practice_control]
  });
  practice_block_flow = new Block({
    timeline: [practice_intro, practice_flow]
  });
  practice_block_instr = new Block({
    timeline: [practice_intro, practice_instr]
  });
*/



  //TRAINING BLOCK
  training_intro = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function(){
      psiturk.finishInstructions();
      return [
        markdown("<h1>Training</h1> You can now proceed with the 10 training trials.")]
      }
    });

    training_control = new MouselabBlock({
        rightMessage: "",
        showMoneyMade: true,
        lowerMessage: "<b>Click destinations to reveal their value for $1! <br> When you're done clicking, move to get the most reward. </b>",
        minTime: DEBUG ? 1 : 10,
        postTrialDelay: DEBUG ? 1 : 2,
        clickDelay: 0,
        show_feedback: false,
        show_custom_feedback: false,
        blockName: 'training',
        blockTitle: 'Training',
        stateDisplay: 'click',
        stateClickCost: PARAMS.inspectCost,
        timeline:  getTrainTrials(10),
        startScore: 50
      });
      training_block = new Block({
        timeline: [training_intro, training_control]
      });


    training_flow = new MouselabBlock({
        rightMessage: "",
        showMoneyMade: true,
        show_div_tutor: true,
        divTutor_config: FLOWCHART,
        lowerMessage: "<b>Click the destinations according to the strategy conveyed by the flowchart! <br> When you're done clicking, move to get the most reward. </b>",
        minTime: DEBUG ? 1 : 10,
        postTrialDelay: DEBUG ? 1 : 2,
        clickDelay: 0,
        show_feedback: false,
        show_custom_feedback: false,
        blockName: 'training',
        blockTitle: 'Training',
        stateDisplay: 'click',
        stateClickCost: PARAMS.inspectCost,
        timeline:   getTrainTrials(10),
        startScore: 50
      });
      training_block_flow = new Block({
        timeline: [training_intro, training_flow]
      });

      training_instr = new MouselabBlock({
          rightMessage: "",
          showMoneyMade: true,
          show_div_tutor: true,
          divTutor_config: INSTRUCTIONS,
          lowerMessage: "<b>Click the destinations according to the strategy conveyed by the instructions! <br> When you're done clicking, move to get the most reward. </b>",
          minTime: DEBUG ? 1 : 10,
          postTrialDelay: DEBUG ? 1 : 2,
          clickDelay: 0,
          show_feedback: false,
          show_custom_feedback: false,
          blockName: 'training',
          blockTitle: 'Training',
          stateDisplay: 'click',
          stateClickCost: PARAMS.inspectCost,
          timeline:   getTrainTrials(10),
          startScore: 50
        });
        training_block_instr = new Block({
          timeline: [training_intro, training_instr]
        });


      // TRANSFER INTRO
      transfer_intro1 = new Block({
        type: 'instructions',
        show_clickable_nav: true,
        pages: function(){
          return [

            markdown("# Flight Planning is a metaphor for life\n\nFlight Planning is like life. You can choose your own path. Before you do, ***you can collect information about the short-term, mid-term, and long-term consequences*** of choosing one path versus another. In Flight Planning the short-term, mid-term, and long-term consequences are the money that you gain or lose at the first, second, and third destination of your trip.")]
          }
        });
      transfer_prompts1 = new Block({
        type: 'survey-text',
        preamble: function() {
          return markdown("# What have you learned?\nPlease take a moment to think about what you can learn from playing *Flight Planning*. ");
        },
        questions: ['What can you do to increase your chances of finding a good flight plan without spending too much on clicks?', 'Imagine that you are choosing between three mortgage loans that have\ndifferent interest rates in the first month, the remainder of the\nfirst year, and the next 19 years. Based on what worked well for\n<it>Flight Planning</it>, how would you choose between these?'],
        button: 'Next'
      });
      transfer_prompts2 = new Block({
        type: 'survey-text',
        preamble: function() {
          return markdown("# Planning your journey through life \n- Please take a moment to think about how you can apply the art of _Flight Planning_ to your own life. \n- Hint: It has nothing to do with airplanes.");
        },
        questions: ['How would you describe the lesson that you learned to a friend who wants to use the art of <it>Flight Planning</it> to their own life?', 'What is an example of a decision from your own life where this strategy might work especially well?', 'In which ways is this situation similar to the <it>Flight Planning</it> game?'],
        button: 'Next'
      });


      transfer_instructions = new Block({
        type: 'instructions',
        show_clickable_nav: true,
        pages: function(){
          return [
            markdown("<h1> Testing Trials Block</h1>\n\n Now you can apply what you've just learned and experienced in a new environment."),

            markdown("<h1> Instructions</h1>\n\n You will play a game where you pretend to be a travel planner.\n  On each round, you will plan a trip for a client who needs to get to an airport. \n You will see a map like shown below. \n The client must get from the city with the car (Ruby Ridge) to one of the cities with airports. \n Each day they can travel from one city to another one. Possible steps are indicated by the arrows. \n "  + img('roadtrip/instructions/Instructions-screenshot-with-car-crop',75)),

            markdown("<h1> Instructions</h1>\n\n Each night they must stay in a hotel, which costs money. The price of the hotel varies between the different cities. \n The client is on a tight budget of $500, so they want to take the cheapest route. \n The client wants a morning flight, so they must pay for a hotel in the airport city as well. Airport hotels are more expensive and start at $100.\n The prices of the hotels just like the maps themselves will change from trial to trial. The prices are negative to convey the cost you will incur by staying in the city."  + img('roadtrip/instructions/Instructions-screenshot-with-all-prices-crop',75)),

            markdown("<h1> Instructions</h1>\n\n But you will not see the prices. \n You can look up the price of the cheapest hotel in a city by typing the city name in a text box and clicking Reveal. \n When you look up a city, its price is revealed on the map. \n Revealing the price costs $10."  + img('roadtrip/instructions/Instructions-screenshot-with-city-name-crop',75)),

            markdown("<h1> Instructions</h1>\n\n At any time, you can select parts of the client's route by clicking on the arrows. \n If you change your mind, you can unselect arrows by clicking them again. \n When you have finalized your route, click Submit. \n  You do not need to check the prices of every city on the route before submitting."  + img('roadtrip/instructions/Instructions-screenshot-with-submit-crop',75)),

            markdown("<h1> Instructions</h1>\n\n When you submit, the total cost of the route will be shown. \n For each client, you start with a budget of $500. We will add one cent to your bonus for every $10 left in the budget after paying for the trip and the lookup fee.\n For example, if the route costs $250 and the lookup fee is $50, there is $200 left in the budget so your bonus increases by $0.20."  + img('roadtrip/instructions/Instructions-screenshot-with-route-price-crop',75))
          ]
          }
        });

        quiz_transfer = new Block({
          preamble: function() {
            return markdown("# Attention Check \n\nPlease answer the following questions.\n");
          },
          type: 'survey-multi-choice',
          questions: ["You must check the price of all cities on the route before submitting it?",
                      "You need to pay for a hotel in the last city in the trip?",
                      "What is your task?",
                      "Is every trial the same?",
                      "What is the cheapest possible price for an airport hotel?"],
          options: [['Yes', 'No'],
                    ['Yes', 'No'],
                    ['Find the shortest route for my client.', 'Find the cheapest route for my client.', 'There is no task.'],
                    ['Yes.', 'No, the hotel prices change.', 'No, the hotel prices and the map changes.'],
                    ['$100', '$150', '$200']
             ],
          correct: ['No','Yes', 'Find the cheapest route for my client.', 'No, the hotel prices and the map changes.', '$100']
        });

        transfer_instr_loop = new Block({
          timeline: [transfer_instructions, quiz_transfer],
          loop_function: function(data) {
            var c, i, len, ref;
            ref = data[data.length-1].correct;
            for (i = 0, len = ref.length; i < len; i++) {
              c = ref[i];
              if (!c) {
                alert("You got at least one question wrong. We'll send you back to the\ninstructions and then you can try again.");
                return true; // try again
              }
            }
            psiturk.saveData();
            return false;
          }
        });
        transfer_intro2 = new Block({
          type: 'instructions',
          show_clickable_nav: true,
          pages: function(){
            return [ markdown("<h1> Testing Trials</h1>\n\n Now that you understand the game, you can proceed with the 8 testing trials. \n\n Good luck!")]
          }
        });
        transfer = new Block({
          type: 'roadtrip-plugin',
          timeline: TEST_TRIALS.slice(INDEX, TEST_TRIALS.length),
        });
        transfer_block = new Block({
          timeline: [transfer_intro1, transfer_prompts1, transfer_prompts2, transfer_instr_loop, transfer_intro2, transfer]
        });


        // END BLOCK
        final_survey = new Block({
          type: 'survey-text',
          preamble: function() {
            return markdown("# Please, answer the following questions:\n    ");
          },
          questions: ["Was there anything confusing in the instructions?", 'What is your age?', 'Which gender do you identify with?'],
          button: 'Next'
        });

        final_survey_flowinst= new Block({
          type: 'survey-text',
          preamble: function() {
            return markdown("# Please, answer the following questions:\n    ");
          },
          questions: ["Was there anything confusing in the instructions?", 'What is your age?', 'Which gender do you identify with?', 'Did you start by looking up the most distant cities (ariports) first?', "If not, please tell us why. The training strategy suggested to lookup up most distant cities first. Why didn't you apply it?"],
          button: 'Next'
        });

        finish = new Block({
          type: 'survey-text',
          preamble: function() {
            return markdown(`# You've completed the HIT\n\n Feel free to give us feedback below before you submit the HIT.\n\n You'll be awarded a bonus based on your performance in 24 hours after the end of the experiment. \n\n Thank you for participating! Hope you enjoyed! \n\n **VERY IMPORTANT: Please click on the "Complete HIT" button that appears on your dashboard after you finish the HIT here.**`);
          },
          questions: ['Any comments/feedback?'],
          button: 'Finish HIT'
        });

        end_block = new Block({
          timeline: [final_survey, finish]
        });

        end_block_flowinst = new Block({
          timeline: [final_survey_flowinst, finish]
        });

  experiment_timeline = (function() {

    return [transfer];
    //return[training_flow];
    if(DEBUG && CONDITION == 0){
      return [transfer_block, end_block];
    } else if(DEBUG && CONDITION == 1){
      return [transfer_block, end_block];
    } else if(DEBUG){
      return [transfer_block, end_block];
    }

    if(CONDITION == 0){
      console.log(" -- Control timeline");
      return [welcome_block, instructions_block, training_block, transfer_block, end_block];

    } else if (CONDITION == 1) {
      console.log("-- Flowchart timeline");
      return [welcome_block_tutor, instructions_block_flow, training_block_flow, transfer_block, end_block_flowinst];

    }else if (CONDITION == 2) {
      console.log("-- Instructions timeline");
      return [welcome_block_tutor, instructions_block_instr, training_block_instr, transfer_block, end_block_flowinst];

    } else {
      console.log(" -- Demo timeline");
      return [end_block];
    }
  })();

  flatten_timeline = function(timeline){
    var global_timeline = [];

    for(var i in timeline){
      t = timeline[i];

      if(t.timeline !== undefined){
        //recursive for sub timelines
        global_timeline.push( flatten_timeline( t.timeline ));
      } else {
        // its a real block
        if(t.type !== undefined){
          info = t.type;
          if(t.questions !== undefined){
            info = info + ' : ' + t.questions.toString();
          }
          global_timeline.push( info);

        } else if (t.trial_id !== undefined){
          global_timeline.push('Mouselab : ' + t.trial_id);

        } else if(t.start_city !== undefined){
          global_timeline.push('Roadtrip : ' + t.start_city);
        }
      }
    }
    global_timeline = [global_timeline.flat(1)];
    return( global_timeline  );
  }
  psiturk.recordUnstructuredData('global_timeline', JSON.stringify(flatten_timeline(experiment_timeline)) );
  //console.log( JSON.stringify(flatten_timeline(experiment_timeline)) );


  // ================================================ #
  // ========= START AND END THE EXPERIMENT ========= #
  // ================================================ #

  // bonus is the total score multiplied by something
  calculateBonus = function() {
    var bonus;
    bonus = SCORE * PARAMS.bonusRate;
    bonus = (Math.round(bonus * 100)) / 100; // round to nearest cent
    return Math.max(0, bonus);
  };
  reprompt = null;
  save_data = function() {
    return psiturk.saveData({
      success: function() {
        console.log('Data saved to psiturk server.');
        if (reprompt != null) {
          window.clearInterval(reprompt);
        }
        //return psiturk.computeBonus('compute_bonus', psiturk.completeHIT);
        psiturk.completeHIT();
      },
      error: function() {
        return prompt_resubmit;
      }
    });
  };
  prompt_resubmit = function() {
    $('#jspsych-target').html("<h1>Oops!</h1>\n<p>\nSomething went wrong submitting your HIT.\nThis might happen if you lose your internet connection.\nPress the button to resubmit.\n</p>\n<button id=\"resubmit\">Resubmit</button>");
    return $('#resubmit').click(function() {
      $('#jspsych-target').html('Trying to resubmit...');
      reprompt = window.setTimeout(prompt_resubmit, 10000);
      return save_data();
    });
  };
  return jsPsych.init({
    display_element: $('#jspsych-target'),
    timeline: experiment_timeline,
    // show_progress_bar: true
    on_finish: function() {
      jsPsych.data.displayData();
      if (DEBUG) {
        jsPsych.data.displayData();
        return save_data();
      } else {
        psiturk.recordUnstructuredData('final_bonus', BONUS);
        return save_data();
      }
    },
    on_data_update: function(data) {
      console.log('data', data);
      return psiturk.recordTrialData(data);
    }
  });
};

// 'Best' paths are paths that guarantee the highest total reward. When nothing is observed, all the paths give reward 0 and all are 'best'
