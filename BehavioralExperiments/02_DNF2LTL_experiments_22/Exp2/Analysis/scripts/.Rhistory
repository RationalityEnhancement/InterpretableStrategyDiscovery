axis.text=element_text(size=fontsize)) +
ylab('Optimal choices') +
xlab('') +
ggtitle('Performance in the \n Mortgage task')
# Mean CA per group ------------------------------------------------------
# roadtrip
df <- aggregate(CA ~ pid + conditionType, subset(tf_valid, task=='roadtrip'), mean)
p5 <- ggplot(df, aes_string(x='conditionType', y='CA', fill='conditionType')) +
geom_violin(alpha = 0.5) +
scale_fill_manual(values=colors) +
geom_boxplot(width = 0.1, color = 'black', fill = colors, alpha = 1) +
scale_y_continuous(minor_breaks = seq(0 , 0, 0), labels = percent) +
scale_x_discrete(labels = cond_names) +
theme(legend.position="none") +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize)) +
ylab('Mean Click Agreement') +
xlab('') +
ggtitle('Click agreement in the \n Roadtrip task')
# mortgage
# mean FSQ per group
df <- aggregate(CA ~ pid + conditionType, subset(tf_valid, task=='mortgage'), mean)
p6 <- ggplot(df, aes_string(x='conditionType', y='CA', fill='conditionType')) +
geom_violin(alpha = 0.5) +
scale_fill_manual(values=colors) +
geom_boxplot(width = 0.1, color = 'black', fill = colors, alpha = 1) +
scale_x_discrete(labels = cond_names) +
scale_y_continuous(minor_breaks = seq(0 , 0, 0), labels = percent) +
theme(legend.position="none") +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize)) +
ylab('Mean Click Agreement') +
xlab('') +
ggtitle('Click agreement in the \n Mortgage task')
pdf('../plots/Exp2_combined.pdf', width = 14, height = 12)
ggarrange(p2, p1, p6, p5, p4, p3, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, nrow = 3, font.label = list(size = fontsize))
dev.off()
pdf('../plots/Exp2_combined.pdf', width = 14, height = 18)
ggarrange(p2, p1, p6, p5, p4, p3, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, nrow = 3, font.label = list(size = fontsize))
dev.off()
setwd("~/Desktop/02_DNF2LTL_experiments_22/Exp1/Analysis/scripts")
source('01_format_data.R')
# test
wilcox.test(pa_mean ~ conditionType, data=df_valid, alternative ='less')
table(df_valid$conditionType)
# effect size
137- 21 *(21+1)/2
# effect size
137- (21 *(21+1))/2
# effect size
137- 21 *(21+1)/2
137/(21*21)
21*21
# effect size
137/(21*21)
cohen.d(expectedScoreMean ~ conditionType, data = df_valid)
# effect size: probability-based measure A
wilcox.test(expectedScoreMean ~ conditionType, data=df_valid, alternative ='less')
157/(21*21)
# effect size: probability-based measure A
137/(21*21)
# effect size: probability-based measure A
cohen.d(pa_mean ~ conditionType, data = df_valid)
setwd("~/Desktop/02_DNF2LTL_experiments_22/Exp2")
source('01_format_data.R')
setwd("~/Desktop/02_DNF2LTL_experiments_22/Exp2/Analysis/scripts")
source('01_format_data.R')
# Aggregate mean FSQ per participant
mean_FSQ <- aggregate(.~ pid + conditionType + task, tf_valid[c('pid', 'FSQ', 'conditionType', 'task')], mean)
wilcox.test(FSQ ~ conditionType, mean_FSQ, alternative='less')
# statistical test roadtrip
mean_FSQ <- aggregate(.~ pid + condixtionType, subset(tf_valid, task =='roadtrip')[c('pid', 'FSQ', 'conditionType')], mean)
# statistical test roadtrip
mean_FSQ <- aggregate(.~ pid + condixtionType, subset(tf_valid, task =='roadtrip')[c('pid', 'FSQ', 'conditionType')], mean)
# statistical test roadtrip
mean_FSQ <- aggregate(.~ pid + conditionType, subset(tf_valid, task =='roadtrip')[c('pid', 'FSQ', 'conditionType')], mean)
wilcox.test(FSQ ~ conditionType, mean_FSQ, alternative='less')
# effect size: probability-based measure A
741/(21*21)
View(mean_FSQ)
table(mean_FSQ$conditionType)
min(table(mean_FSQ$conditionType))
table(mean_FSQ$conditionType)
# effect size: probability-based measure A
741/(54*55)
# effect size: probability-based measure A
((54*55)-741)/(54*55)
?wilcox.test
wilcox.test(FSQ ~ conditionType, mean_FSQ, alternative='less')
# effect size: probability-based measure A
((54*55)-741)/(54*55)
# statistical test mortgage
mean_FSQ <- aggregate(.~ pid + conditionType, subset(tf_valid, task =='mortgage')[c('pid', 'FSQ', 'conditionType')], mean)
wilcox.test(FSQ ~ conditionType, mean_FSQ, alternative='less')
# effect size: probability-based measure A
((54*55)-658)/(54*55)
# add if in the previous trial the best value was encountered
df <- subset(trial_frame, task == 'roadtrip')
df$encounteredBestValue_prev <- Lag(df$encounteredBestValue, 1)
# in first round no has previously encountered the best value
df[df$trial == 0, ]$encounteredBestValue_prev <- 0
aggregate(FSQ ~ encounteredBestValue_prev, df, mean)
# test
df_mean <- aggregate(FSQ ~ pid + encounteredBestValue_prev, df, mean)
wilcox.test(FSQ ~ encounteredBestValue_prev, df_mean)
table(df_mean$encounteredBestValue_prev)
# effect size: probability-based measure A
((112*89)-3203)/(112*89)
# statistical test mortgage
mean_CA <- aggregate(.~ pid + conditionType, subset(tf_valid, task =='mortgage')[c('pid', 'CA', 'conditionType')], mean)
# statistical test roadtrip
mean_CA <- aggregate(.~ pid + conditionType, subset(tf_valid, task =='roadtrip')[c('pid', 'CA', 'conditionType')], mean)
wilcox.test(CA ~ conditionType, mean_CA, alternative='less')
# effect size: probability-based measure A
((54*55)-838)/(54*55)
# statistical test mortgage
mean_CA <- aggregate(.~ pid + conditionType, subset(tf_valid, task =='mortgage')[c('pid', 'CA', 'conditionType')], mean)
wilcox.test(CA ~ conditionType, mean_CA, alternative='less')
# effect size: probability-based measure A
((54*55)-659)/(54*55)
# statistical test roadtrip
mean_score <- aggregate(.~ pid + conditionType, subset(tf_valid, task =='roadtrip')[c('pid', 'score', 'conditionType')], mean)
wilcox.test(score ~ conditionType, mean_score, alternative='less')
# effect size: probability-based measure A
((54*55)-995)/(54*55)
# statistical test mortgage
mean_score <- aggregate(.~ pid + conditionType, subset(tf_valid, task =='mortgage')[c('pid', 'score', 'conditionType')], mean)
wilcox.test(score ~ conditionType, mean_score, alternative='less')
# effect size: probability-based measure A
((54*55)-654)/(54*55)
setwd("~/Desktop/02_DNF2LTL_experiments_22/Exp1/Analysis/scripts")
source('01_format_data.R')
# test
wilcox.test(pa_mean ~ conditionType, data=df_valid, alternative ='less')
# effect size: probability-based measure A
((21*21)-137)/(21*21)
source('01_format_data.R')
# effect size
cohen.d(trialTimeMean ~ conditionType, data=df_valid)
setwd("~/Desktop/02_DNF2LTL_experiments_22/Exp2/Analysis/scripts")
source('01_format_data.R')
View(trial_frame)
View(trial_frame)
df <- subset(df, task == 'roadtrip')
df <- subset(tiral_frame, task = 'roadtrip')
df <- subset(trial_frame, task = 'roadtrip')
df <- subset(trial_frame, task == 'roadtrip')
df <- subset(trial_frame, task == 'roadtrip')
for(row in df$clicks){
print(row)
}
for(row in df$clicks){
first_click <- row[0]
print(first_click)
}
df <- subset(trial_frame, task == 'roadtrip')
for(row in df$clicks){
first_click <- row[1]
print(first_click)
}
for(row in df$clicks){
first_click <- row[[1]]
print(first_click)
}
for(row in df$clicks){
print(row)
first_click <- row[[1]]
#print(first_click)
}
df <- subset(trial_frame, task == 'roadtrip')
for(row in df$clicks){
#print(row)
first_click <- substr(row[[1]], 1, 1)
print(first_click)
}
df <- subset(trial_frame, task == 'roadtrip')
for(row in df$clicks){
#print(row)
first_click <- substr(row, 1, 1)
print(first_click)
}
df <- subset(trial_frame, task == 'roadtrip')
for(row in df$clicks){
#print(row)
first_click <- substr(row, 2, 2)
print(first_click)
}
source('01_format_data.R')
colors <- c("#3977AF", "#EF8536")
fontsize <- 25
fontsize_title <- 25
cond_names <- c('control', 'supported by \n decision aid')
labels <- c('control', 'supported by \n decision aid')
# Mean FSQ per group ------------------------------------------------------
# roadtrip
df <- aggregate(FSQ ~ pid + conditionType, subset(tf_valid, task=='roadtrip'), mean)
p1 <- ggplot(df, aes_string(x='conditionType', y='FSQ', fill='conditionType')) +
geom_violin(alpha = 0.5) +
scale_fill_manual(values=colors) +
geom_boxplot(width = 0.1, color = 'black', fill = colors, alpha = 1) +
scale_y_continuous(minor_breaks = seq(0 , 0, 0), labels = percent) +
scale_x_discrete(labels = cond_names) +
theme(legend.position="none") +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize)) +
ylab('Mean FSQ') +
xlab('') +
ggtitle('Far-sightedness in the \n Road Trip task')
# mortgage
# mean FSQ per group
df <- aggregate(FSQ ~ pid + conditionType, subset(tf_valid, task=='mortgage'), mean)
p2 <- ggplot(df, aes_string(x='conditionType', y='FSQ', fill='conditionType')) +
geom_violin(alpha = 0.5) +
scale_fill_manual(values=colors) +
geom_boxplot(width = 0.1, color = 'black', fill = colors, alpha = 1) +
scale_x_discrete(labels = cond_names) +
scale_y_continuous(minor_breaks = seq(0 , 0, 0), labels = percent) +
theme(legend.position="none") +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize)) +
ylab('Mean FSQ') +
xlab('') +
ggtitle('Far-sightedness in the \n Mortgage task')
# Mean Score per group ------------------------------------------------------
# roadtrip
df <- aggregate(score ~ pid + conditionType, subset(tf_valid, task=='roadtrip'), mean)
p3 <- ggplot(df, aes_string(x='conditionType', y='score', fill='conditionType')) +
geom_violin(alpha = 0.5) +
scale_fill_manual(values=colors) +
geom_boxplot(width = 0.1, color = 'black', fill = colors, alpha = 1) +
scale_x_discrete(labels = cond_names) +
scale_y_continuous(minor_breaks = seq(0 , 0, 0)) +
theme(legend.position="none") +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize)) +
ylab('Mean score') +
xlab('') +
ggtitle('Performance in the \n Road Trip task')
# mortgage
df <- aggregate(score ~ pid + conditionType, subset(tf_valid, task=='mortgage'), mean)
p4 <- ggplot(df, aes_string(x='conditionType', y='score', fill='conditionType')) +
geom_violin(alpha = 0.5) +
scale_fill_manual(values=colors) +
geom_boxplot(width = 0.1, color = 'black', fill = colors, alpha = 1) +
scale_y_continuous(minor_breaks = seq(0 , 0, 0), labels = percent) +
scale_x_discrete(labels = cond_names) +
theme(legend.position="none") +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize)) +
ylab('Optimal choices') +
xlab('') +
ggtitle('Performance in the \n Mortgage task')
# Mean CA per group ------------------------------------------------------
# roadtrip
df <- aggregate(CA ~ pid + conditionType, subset(tf_valid, task=='roadtrip'), mean)
p5 <- ggplot(df, aes_string(x='conditionType', y='CA', fill='conditionType')) +
geom_violin(alpha = 0.5) +
scale_fill_manual(values=colors) +
geom_boxplot(width = 0.1, color = 'black', fill = colors, alpha = 1) +
scale_y_continuous(minor_breaks = seq(0 , 0, 0), labels = percent) +
scale_x_discrete(labels = cond_names) +
theme(legend.position="none") +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize)) +
ylab('Mean Click Agreement') +
xlab('') +
ggtitle('Click agreement in the \n Road Trip task')
# mortgage
# mean FSQ per group
df <- aggregate(CA ~ pid + conditionType, subset(tf_valid, task=='mortgage'), mean)
p6 <- ggplot(df, aes_string(x='conditionType', y='CA', fill='conditionType')) +
geom_violin(alpha = 0.5) +
scale_fill_manual(values=colors) +
geom_boxplot(width = 0.1, color = 'black', fill = colors, alpha = 1) +
scale_x_discrete(labels = cond_names) +
scale_y_continuous(minor_breaks = seq(0 , 0, 0), labels = percent) +
theme(legend.position="none") +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize)) +
ylab('Mean Click Agreement') +
xlab('') +
ggtitle('Click agreement in the \n Mortgage task')
pdf('../plots/Exp2_combined.pdf', width = 14, height = 18)
ggarrange(p2, p1, p6, p5, p4, p3, labels = c("a", "b", "c", "d", "e", "f"), ncol = 2, nrow = 3, font.label = list(size = fontsize))
dev.off()
# FSQ Learning Curves per group -----------------------------------------------------
getLC <- function(df, dv, labels = cond_names, return=FALSE, path=''){
# cast condition as binary variable
df$condition = df$conditionType == 'control'
df$trial <- df$trial + 1
# aggregate mean
formula = reformulate(termlabels = 'condition + trial', response = dv)
data_mean <- aggregate(formula, df, mean)
# aggregate error
data_N <- aggregate(formula, df, length)
data_sd <- aggregate(formula, df, sd)
data_mean$error <- 1.96*data_sd[,c(dv)]/sqrt(data_N[,c(dv)])
#rename
names(data_mean) <- c('condition', 'trial', 'mean', 'error')
if(return){
data_mean
} else {
plotLC(data_mean, dv, labels, return, path = path)
}
}
data <- getLC(subset(tf_valid, task =='roadtrip'), 'FSQ', return = TRUE)
# plot
p1 <- ggplot(data, mapping = aes(x=trial, y=mean, group=condition)) + geom_line(aes(color=condition)) +
geom_ribbon(subset(data, !condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[1]) +
geom_ribbon(subset(data, condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[2]) +
xlab("Trial") +
ylab('Mean FSQ') +
ggtitle('Far-sightedness in \nthe Road Trip task') +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors, labels = labels)  +
theme(text = element_text(size = 15))  +
scale_x_continuous(limits = c(1,8), expand = c(0, 0), breaks = seq(1 , 8, 1), minor_breaks = seq(0 , 10, 1))+
scale_y_continuous(labels = percent, limits=c(0.1, 1)) +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize),
legend.title=element_blank(),
legend.position="none")
p1
data <- getLC(subset(tf_valid, task =='mortgage'), 'FSQ', return = TRUE)
# plot
p2 <- ggplot(data, mapping = aes(x=trial, y=mean, group=condition)) + geom_line(aes(color=condition)) +
geom_ribbon(subset(data, !condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[1]) +
geom_ribbon(subset(data, condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[2]) +
xlab("Trial") +
ylab('Mean FSQ') +
ggtitle('Far-sightedness in \nthe Mortgage task') +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors, labels = labels)  +
theme(text = element_text(size = 15))  +
scale_x_continuous(limits = c(1,8), expand = c(0, 0), breaks = seq(1 , 8, 1), minor_breaks = seq(0 , 10, 1))+
scale_y_continuous(labels = percent, limits=c(0.1, 1)) +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize),
legend.title=element_blank(),
legend.position="none")
p2
# Mean Score Learning Curves -----------------------------------------------------
data <- getLC(subset(tf_valid, task =='roadtrip'), 'score', return = TRUE)
# plot
p3 <- ggplot(data, mapping = aes(x=trial, y=mean, group=condition)) + geom_line(aes(color=condition)) +
geom_ribbon(subset(data, !condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[1]) +
geom_ribbon(subset(data, condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[2]) +
xlab("Trial") +
ylab('Mean Score') +
ggtitle('Performance in \nthe Road Trip task') +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors, labels = labels)  +
theme(text = element_text(size = 15))  +
scale_x_continuous(limits = c(1,8), expand = c(0, 0), breaks = seq(1 , 8, 1), minor_breaks = seq(0 , 10, 1))+
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize),
legend.title=element_blank(),
legend.position="none")
p3
data <- getLC(subset(tf_valid, task =='mortgage'), 'score', return = TRUE)
# plot
p4 <- ggplot(data, mapping = aes(x=trial, y=mean, group=condition)) + geom_line(aes(color=condition)) +
geom_ribbon(subset(data, !condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[1]) +
geom_ribbon(subset(data, condition), mapping=aes(ymin=mean-error, ymax=mean+error), alpha=0.2, fill=colors[2]) +
xlab("Trial") +
ylab('Optimal Choices') +
ggtitle('Performance in \nthe Mortgage task') +
theme_bw() +
theme(legend.position = "top", plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors, labels = labels)  +
theme(text = element_text(size = 15))  +
scale_x_continuous(limits = c(1,8), expand = c(0, 0), breaks = seq(1 , 8, 1), minor_breaks = seq(0 , 10, 1))+
scale_y_continuous(labels = percent) +
theme(text = element_text(size = fontsize),
plot.title = element_text(hjust = 0.5, size = fontsize_title),
axis.text=element_text(size=fontsize),
legend.title=element_blank(),
legend.position="none")
p4
pdf('../plots/Exp2_learning_curves.pdf', width = 14, height = 12)
ggarrange(p2, p1, p4, p3, labels = c("a", "b", "c", "d"), ncol = 2, nrow = 2, font.label = list(size = fontsize))
dev.off()
source('01_format_data.R')
source('01_format_data.R')
setwd("~/Desktop/02_DNF2LTL_experiments_22/Exp1/Analysis/scripts")
source('01_format_data.R')
# -- CA
model <- lmer('pa_mean ~ trial * conditionType + (1|pid)', trial_frame)
library(lme4)
library(lmerTest)
trial_frame$condition
# -- CA
model <- lmer('pa_mean ~ index * condition + (1|pid)', trial_frame)
# -- CA
model <- lmer('pa ~ index * condition + (1|pid)', trial_frame)
summary(model)
View(trial_frame)
model <- lm('pa ~ index * condition ', trial_frame)
summary(model)
# -- CA
model <- lmer('pa ~ index * condition + (1|pid)', trial_frame)
summary(model)
# -- CA
model <- lmer('pa ~ index + condition:index + (1|pid)', trial_frame)
summary(model)
# -- CA
model <- lmer('pa ~ index * condition + (1|pid)', trial_frame)
summary(model)
1.004e-01
1.150e-02
# -- expected score
model <- lmer('expectedScore ~ index * condition + (1|pid)', trial_frame)
summary(model)
View(df_combined)
unique(df_combined$conditionType)
# comparison to control group:
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'))
table(df_combined$conditionType)
# comparison to control group:
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'))
((60*21)-59)/(60*21)
subset(df_combined, conditionType != 'flowchart')
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'))
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'))
((60*21)-93)/(60*21)
# comparison to control group:
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'))
((60*21)-59)/(60*21)
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'))
((60*21)-93)/(60*21)
# comparison to control group:
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'))
((60*21)-59)/(60*21)
describeBy(df_combined$pa_mean, df_combined$conditionType, digits=3, mat=TRUE)
# Expected score ----------------------------------------------------------
describeBy(df_combined$expectedScoreMean, df_combined$conditionType, digits=3, mat=TRUE)
# Expected score ----------------------------------------------------------
describeBy(df_combined$expectedScoreMean, df_combined$conditionType, digits=3, mat=TRUE)
# comparison to control group:
t.test(expectedScoreMean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'), var.equal=TRUE)
cohen.d(expectedScoreMean ~ conditionType, data = subset(df_combined, conditionType != 'flowchart'))
t.test(expectedScoreMean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'), var.equal=TRUE)
cohen.d(expectedScoreMean ~ conditionType, data = subset(df_combined, conditionType != 'instructions'))
# Expected score ----------------------------------------------------------
describeBy(df_combined$expectedScoreMean, df_combined$conditionType, digits=3, mat=TRUE)
# comparison to control group:
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'), alternative='less')
((60*21)-59)/(60*21)
wilcox.test(pa_mean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'), alternative='less')
# comparison to control group:
t.test(expectedScoreMean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'), var.equal=TRUE, alternative='less')
cohen.d(expectedScoreMean ~ conditionType, data = subset(df_combined, conditionType != 'flowchart'))
t.test(expectedScoreMean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'), var.equal=TRUE, alternative='less')
cohen.d(expectedScoreMean ~ conditionType, data = subset(df_combined, conditionType != 'instructions'))
t.test(expectedScoreMean ~ conditionType, data=subset(df_combined, conditionType != 'instructions'), var.equal=TRUE, alternative='less')
cohen.d(expectedScoreMean ~ conditionType, data = subset(df_combined, conditionType != 'instructions'))
# comparison to control group:
t.test(expectedScoreMean ~ conditionType, data=subset(df_combined, conditionType != 'flowchart'), var.equal=TRUE, alternative='less')
cohen.d(expectedScoreMean ~ conditionType, data = subset(df_combined, conditionType != 'flowchart'))
# Expected score ----------------------------------------------------------
describeBy(df_combined$expectedScoreMean, df_combined$conditionType, digits=3, mat=TRUE)
# test
t.test(expectedScoreMean ~ conditionType, data=df_valid, var.equal=TRUE,  alternative ='less')
source('01_format_data.R')
library(lme4)
library(lmerTest)
# -- CA
model <- lmer('pa ~ index * condition + (1|pid)', trial_frame)
summary(model)
1.004e-01
# -- expected score
model <- lmer('expectedScore ~ index * condition + (1|pid)', trial_frame)
summary(model)
# -- CA
model <- lmer('pa ~ index * condition + (1|pid)', trial_frame)
summary(model)
2.362e-03
setwd("~/Desktop/02_DNF2LTL_experiments_22/Exp2/Analysis/scripts")
source('01_format_data.R')
# add if in the previous trial the best value was encountered
df <- subset(trial_frame, task == 'roadtrip')
df$encounteredBestValue_prev <- Lag(df$encounteredBestValue, 1)
?Lag
??Lag
library(stats)
df$encounteredBestValue_prev <- Lag(df$encounteredBestValue, 1)
library(Hmisc)
# add if in the previous trial the best value was encountered
df <- subset(trial_frame, task == 'roadtrip')
df$encounteredBestValue_prev <- Lag(df$encounteredBestValue, 1)
# in first round no has previously encountered the best value
df[df$trial == 0, ]$encounteredBestValue_prev <- 0
aggregate(FSQ ~ encounteredBestValue_prev, df, mean)
# test
df_mean <- aggregate(FSQ ~ pid + encounteredBestValue_prev, df, mean)
wilcox.test(FSQ ~ encounteredBestValue_prev, df_mean)
# effect size: probability-based measure A
((112*89)-3203)/(112*89)
